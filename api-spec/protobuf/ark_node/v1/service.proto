syntax = "proto3";

package ark_node.v1;

import "ark_node/v1/types.proto";
import "google/api/annotations.proto";

service Service {
  // GetAddress returns offchain address
  rpc GetAddress(GetAddressRequest) returns (GetAddressResponse) {
    option (google.api.http) = {
      get: "/v1/address"
    };
  };
  // GetBalance returns ark balance
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
      get: "/v1/balance"
    };
  };
  // GetInfo returns info about the ark account
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  };
  // GetOnboardAddress returns onchain address and invoice for requested amount
  rpc GetOnboardAddress(GetOnboardAddressRequest) returns (GetOnboardAddressResponse) {
    option (google.api.http) = {
      post: "/v1/onboard"
      body: "*"
    };
  };
  // Send asks to send amount to ark address by joining a round
  rpc Send(SendRequest) returns (SendResponse) {
    option (google.api.http) = {
      post: "/v1/send"
      body: "*"
    };
  };
  // SendAsync asks to send amount to ark address with a pending payment
  rpc SendAsync(SendAsyncRequest) returns (SendAsyncResponse) {
    option (google.api.http) = {
      post: "/v1/sendasync"
      body: "*"
    };
  };
  // SendOnchain asks to send requested amount to requested onchain address
  rpc SendOnchain(SendOnchainRequest) returns (SendOnchainResponse) {
    option (google.api.http) = {
      post: "/v1/send/onchain"
      body: "*"
    };
  };
  // Returns round info for optional round_id (no round_id returns current round info)
  rpc GetRoundInfo(GetRoundInfoRequest) returns (GetRoundInfoResponse) {
    option (google.api.http) = {
      get: "/v1/round/{round_id}"
    };
  };
  // GetTransactionHistory returns virtual transactions history
  rpc GetTransactionHistory(GetTransactionHistoryRequest) returns (GetTransactionHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/transactions"
    };
  };
}

message GetAddressRequest {}
message GetAddressResponse {
  string address = 1;
}

message GetBalanceRequest {}
message GetBalanceResponse {
  uint64 amount = 1;
}

message GetInfoRequest {}
message GetInfoResponse {
  enum Network {
    NETWORK_UNSPECIFIED = 0;
    NETWORK_MAINNET = 1;
    NETWORK_TESTNET = 2;
    NETWORK_REGTEST = 3;
  }
  // the network of the wallet
  Network network = 1;
  // list containing info about the wallet accounts.
  AccountInfo account = 2;
  // info about the current version of the ark wallet.
  BuildInfo build_info = 3;
}

message GetOnboardAddressRequest {
  uint64 amount = 1;
}
message GetOnboardAddressResponse {
  string address = 1;
}

message SendRequest {
  string address = 1;
  uint64 amount = 2;
}
message SendResponse {
  string round_id = 1;
}

message SendAsyncRequest {
  string address = 1;
  uint64 amount = 2;
}
message SendAsyncResponse {
  string redeem_tx = 1;
}

message SendOnchainRequest {
  string address = 1;
  uint64 amount = 2;
}
message SendOnchainResponse {
  string txid = 1;
}

message GetRoundInfoRequest {
  string round_id = 1;
}
message GetRoundInfoResponse {
  Round round = 1;
}

message GetTransactionHistoryRequest {}
message GetTransactionHistoryResponse {
  repeated TransactionInfo transactions = 1;
}