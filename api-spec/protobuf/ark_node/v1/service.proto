syntax = "proto3";

package ark_node.v1;

import "ark_node/v1/types.proto";
import "google/api/annotations.proto";

service Service {
  // GetAddress returns offchain address
  rpc GetAddress(GetAddressRequest) returns (GetAddressResponse) {
    option (google.api.http) = {
      get: "/v1/address"
    };
  };
  // GetBalance returns ark balance
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
      get: "/v1/balance"
    };
  };
  // GetInfo returns info about the ark account
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  };
  // GetOnboardAddress returns onchain address and invoice for requested amount
  rpc GetOnboardAddress(GetOnboardAddressRequest) returns (GetOnboardAddressResponse) {
    option (google.api.http) = {
      post: "/v1/onboard"
      body: "*"
    };
  };
  // Returns round info for optional round_id (no round_id returns current round info)
  rpc GetRoundInfo(GetRoundInfoRequest) returns (GetRoundInfoResponse) {
    option (google.api.http) = {
      get: "/v1/round/{round_id}"
    };
  };
  // GetTransactionHistory returns virtual transactions history
  rpc GetTransactionHistory(GetTransactionHistoryRequest) returns (GetTransactionHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/transactions"
    };
  };
  // Redeems an ark note by joining a round
  rpc RedeemNote(RedeemNoteRequest) returns (RedeemNoteResponse) {
    option (google.api.http) = {
      post: "/v1/note/redeem"
      body: "*"
    };
  };
  // Send asks to send amount to ark address by joining a round
  rpc SendOffChain(SendOffChainRequest) returns (SendOffChainResponse) {
    option (google.api.http) = {
      post: "/v1/send/offchain"
      body: "*"
    };
  };
  // SendOnChain asks to send requested amount to requested onchain address
  rpc SendOnChain(SendOnChainRequest) returns (SendOnChainResponse) {
    option (google.api.http) = {
      post: "/v1/send/onchain"
      body: "*"
    };
  };
  // CreateVHTLCAddress computes a VHTLC address
  rpc CreateVHTLC(CreateVHTLCRequest) returns (CreateVHTLCResponse) {
    option (google.api.http) = {
      post: "/v1/vhtlc"
      body: "*"
    };
  };
  // ClaimVHTLC = self send vHTLC -> VTXO
  rpc ClaimVHTLC(ClaimVHTLCRequest) returns (ClaimVHTLCResponse) {
    option (google.api.http) = {
      post: "/v1/vhtlc/claim"
      body: "*"
    };
  };
  // ListVHTLC = list all vhtlc OR filter by preimage_hash
  rpc ListVHTLC(ListVHTLCRequest) returns (ListVHTLCResponse) {
    option (google.api.http) = {
      get: "/v1/vhtlc"
    };
  };
  rpc CreateInvoice(CreateInvoiceRequest) returns (CreateInvoiceResponse) {
    option (google.api.http) = {
      post: "/v1/invoice"
      body: "*"
    };
  }
  rpc PayInvoice(PayInvoiceRequest) returns (PayInvoiceResponse) {
    option (google.api.http) = {
      post: "/v1/invoice/pay"
      body: "*"
    };
  }
  rpc IsInvoiceSettled(IsInvoiceSettledRequest) returns (IsInvoiceSettledResponse) {
    option (google.api.http) = {
      get: "/v1/invoice/status"
    };
  }
}

message GetAddressRequest {}
message GetAddressResponse {
  string address = 1;
  string pubkey = 2;
}

message GetBalanceRequest {}
message GetBalanceResponse {
  uint64 amount = 1;
}

message GetInfoRequest {}
message GetInfoResponse {
  enum Network {
    NETWORK_UNSPECIFIED = 0;
    NETWORK_MAINNET = 1;
    NETWORK_TESTNET = 2;
    NETWORK_REGTEST = 3;
  }
  // the network of the wallet
  Network network = 1;
  // list containing info about the wallet accounts.
  AccountInfo account = 2;
  // info about the current version of the ark wallet.
  BuildInfo build_info = 3;
}

message GetOnboardAddressRequest {
  uint64 amount = 1;
}
message GetOnboardAddressResponse {
  string address = 1;
}

message GetRoundInfoRequest {
  string round_id = 1;
}
message GetRoundInfoResponse {
  Round round = 1;
}

message GetTransactionHistoryRequest {}
message GetTransactionHistoryResponse {
  repeated TransactionInfo transactions = 1;
}

message RedeemNoteRequest {
  string note = 1;
}
message RedeemNoteResponse {
  string txid = 1;
}

message SendOffChainRequest {
  string address = 1;
  uint64 amount = 2;
}
message SendOffChainResponse {
  string txid = 1;
}

message SendOnChainRequest {
  string address = 1;
  uint64 amount = 2;
}
message SendOnChainResponse {
  string txid = 1;
}

message CreateVHTLCRequest {
  string preimage_hash = 1;
  string sender_pubkey = 2; 
  string receiver_pubkey = 3; 
}
message CreateVHTLCResponse {
  string address = 1;
  string claim_pubkey = 2;
  string refund_pubkey = 3;
  string server_pubkey = 4;
  TaprootTree swap_tree = 5;
}

message ClaimVHTLCRequest {
  string preimage = 1;
}
message ClaimVHTLCResponse {
  string redeem_txid = 1;
}

message ListVHTLCRequest {
  string preimage_hash_filter = 1;
}
message ListVHTLCResponse {
  repeated Vtxo vhtlcs = 1;
}

message CreateInvoiceRequest {
  uint64 amount = 1;
  string memo = 2;
  string preimage = 3;
}
message CreateInvoiceResponse {
  string invoice = 1;
  string preimage_hash = 2;
}

message PayInvoiceRequest {
  string invoice = 1;
}
message PayInvoiceResponse {
  string preimage = 1;
}

message TaprootTree {
  TaprootLeaf claim_leaf = 1;
  TaprootLeaf refund_leaf = 2;
  TaprootLeaf refund_without_boltz_leaf = 3;
  TaprootLeaf unilateral_claim_leaf = 4;
  TaprootLeaf unilateral_refund_leaf = 5;
  TaprootLeaf unilateral_refund_without_boltz_leaf = 6;
}

message TaprootLeaf {
  int32 version = 1;
  string output = 2;
}

message IsInvoiceSettledRequest {
  string invoice = 1;
}

message IsInvoiceSettledResponse {
  bool settled = 1;
}