package pages

import (
	"github.com/ArkLabsHQ/fulmine/internal/interface/web/templates/components"
)

templ SendPreviewIcon() {
	<div class="flex items-center w-16 h-16 bg-white/10 rounded-full mr-2">
	  <svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12 mx-auto text-white" viewBox="0 0 24 24">
      <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="2">
        <path stroke-miterlimit="10" d="M17.657 6.343L6.343 17.657"/>
        <path stroke-linejoin="round" d="M18.101 16.733V7.437A1.53 1.53 0 0 0 16.563 5.9H7.267"/>
      </g>
    </svg>
	</div>
}

templ SuccessIcon() {
	<div class="flex items-center w-16 h-16 bg-green/10 rounded-full mr-2">
	  <svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12 mx-auto text-green" viewBox="0 0 376 384">
      <path fill="currentColor" d="M119 282L346 55l29 30l-256 256L0 222l30-30z"/>
    </svg>
	</div>
}

templ SendBodyContent(currentBalance string) {
	@components.DesktopHeader()
	<div id="sendBody">
	  <form hx-post="/send/preview" hx-target="#sendBody">
	    <input id="balance" type="hidden" value={ currentBalance } />
	    <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	      <div>
	        @components.Header("Send")
					@components.BalanceWithMax(components.ArkBalanceIcon(), currentBalance)
					@components.InputAddress()
					@components.SendAmount(currentBalance)
	    	</div>
	    	@components.ActionButtons("Preview send", true)
	    </div>
	  </form>
	</div>
	<script>
	  const updateUI = ({ sats, buttonLabel }) => {
			const button = document.querySelector('button[type="submit"]')
			button.disabled = false
			button.innerText = buttonLabel
			document.querySelector('#sats').value = sats
			const unit = document.querySelector('#unit').innerText
			const amount = unit === 'SATS' ? sats : fromSatoshis(sats)
			document.querySelector('#amount').value = amount
		}

	  const validateArkNote = async (note) => {
      const data = new FormData()
			data.set('note', note)
			const res = await fetch('/helpers/note/validate', { method: 'POST', body: data })
			if (res.ok) {
				const { sats, valid } = await res.json()
				if (valid) updateUI({ sats, buttonLabel: 'Redeem note' })
				return valid
			}
			return false
		}
		

	const validateIsBip21 = async (bip21) => {
      const data = new FormData()
			data.set('bip21', bip21)
			const res = await fetch('/helpers/bip21/validate', { method: 'POST', body: data })
			if (res.ok) {
				const { sats, valid } = await res.json()
				if (valid) updateUI({ sats, buttonLabel: 'Send' })
				return valid
			}
			return false
		}

	  const validateInvoice = async (invoice) => {
      const data = new FormData()
			data.set('invoice', invoice)
			const res = await fetch('/helpers/invoice/validate', { method: 'POST', body: data })
			if (res.ok) {
				const { sats, valid } = await res.json()
				if (valid) updateUI({ sats, buttonLabel: 'Send to lightning' })
				return valid
			}
			return false
		}

	  const validateOffer = async (offer) => {
	  const data = new FormData()
	  	data.set('offer', offer)
				const res = await fetch('/helpers/offer/validate', { method: 'POST', body: data })
				if (res.ok) {
					const { sats, valid } = await res.json()
					if (valid) updateUI({ sats, buttonLabel: 'Send to Bolt12' })
					return valid
				}
				return false
			}


	  const canSend = async () => {
			const address = document.querySelector('#address').value
			const amount = document.querySelector('#amount').value
			const button = document.querySelector('button[type="submit"]')
			const balance = parseInt(document.querySelector('#balance').value)
			const sats = parseInt(document.querySelector('#sats').value)
			button.disabled = address.length === 0 || amount.length === 0 || !sats || sats > balance
			button.innerText = sats > balance ? 'Not enough funds' : 'Preview send'
			if (address) {
				const [isNote, isInvoice, isBip21, isOffer] = await Promise.all([
					validateArkNote(address),
					validateInvoice(address),
					validateIsBip21(address),
					validateOffer(address),
				])

				const disableInputAmount = isNote || isInvoice || isBip21  || isOffer
					
				document.querySelector('#amount').disabled = disableInputAmount
			} else {
				document.querySelector('#amount').disabled = false
			}
		}

	  document.querySelector('#address').addEventListener('input', canSend)
	  document.querySelector('#amount').addEventListener('input', canSend)
	</script>
}

templ SendPreviewContent(address, sats, feeAmount, total string) {
	<div id="sendBody">
	  <form hx-post="/send/confirm" hx-target="#sendBody" hx-target="outerHTML">
		  <input type="hidden" name="address" value={address}>
		  <input type="hidden" name="sats" value={sats}>
	    <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	      <div class="flex flex-col items-center">
	        @components.Header("Confirm Send")
					<div class="showOnRequest flex flex-col items-center mt-10 w-full">
				    @components.SpinnerIconOrange()
					   <p class="mt-10">Sending...</p>
					</div>
					<div class="hideOnRequest flex flex-col items-center w-full">
	          @SendPreviewIcon()
					  <p class="mt-4">Send</p>
					  <p class="mt-4 text-3xl cryptoAmount" sats={sats}>{sats} SATS</p>
					  <div class="flex mt-4 w-64 gap-2">
					    <p class="text-white/50">to</p>
					  	<p class="overflow-hidden text-ellipsis whitespace-nowrap" id="sentAddress">{address}</p>
							@components.CopyWidget(address)
					  </div>
					  @components.SendTxTable(sats, feeAmount, total)
					</div>
	    	</div>
	    	@components.ActionButtons("Confirm")
	    </div>
	  </form>
	</div>
}

templ SendSuccessContent(address, amount, txid, explorerUrl string) {
	<div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	  <div class="flex flex-col items-center">
		  @components.Header("Sent")
	    @SuccessIcon()
			<p class="mt-8">Sent successfully</p>
			<p class="mt-8 text-3xl cryptoAmount" sats={amount}>{amount} SATS</p>
			<div class="flex mt-8 w-64 gap-2">
			  <p class="text-white/50">to</p>
				<p class="overflow-hidden text-ellipsis whitespace-nowrap">{address}</p>
				<p class="text-white/50">@components.CopyWidget(address)</p>
			</div>
		</div>
		if len(txid) == 32 {
		  @components.ViewTxButton(txid, explorerUrl)
		}
	</div>
}