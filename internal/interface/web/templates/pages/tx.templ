package pages

import (
	"github.com/ArkLabsHQ/fulmine/internal/interface/web/templates/components"
	"github.com/ArkLabsHQ/fulmine/internal/interface/web/types"
)

templ TransferTxBodyContent(tx types.Transfer, explorerUrl string) {
  @components.DesktopHeader()
	@components.Transfer(tx, explorerUrl)
}


templ TransferTxPendingContent(tx types.Transfer, explorerUrl string, nextClaim string) {
  @components.DesktopHeader()
  <form hx-post={"/helpers/claim/" + tx.Txid}>
    <div class="p-3 flex flex-col rounded-lg h-screen md:h-auto md:bg-desktopbg">
      <div>
        @components.HeaderWithAction("Settle Transaction", components.SettleButtonsAction(tx.Txid, explorerUrl))
        <div class="hideOnRequest flex flex-col items-center">
          @components.TxIcon(tx.Kind, "")
          <p class="mt-4 capitalize">{tx.Kind}</p>
          <p class="mt-4 text-3xl cryptoAmount" sats={tx.Amount}>{tx.Amount} SATS</p>
          @components.PendingTxTable(tx.CreatedAt, tx.ExpiresAt, nextClaim)
        </div>
      </div>
      <div class="showOnRequest flex flex-col items-center mt-10 w-full">
        @components.SpinnerIconOrange()
        <p class="font-semibold mt-10 mb-3 text-lg">Processing...</p>
        <p class="max-w-[320px] text-center">Settlement is underwayâ€”your off-chain Ark transactions are securely being confirmed into the Bitcoin blockchain. You can safely leave this page; the signing sessions will continue seamlessly in the background with all available participants.</p>
      </div>
    </div>
  </form>
}

//TODO: add flesh to the SwapContent
templ SwapContent(tx types.Swap, vhtlc *types.Transfer, redeem *types.Transfer) {
  @components.DesktopHeader()
  <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
     <div class="flex flex-col items-center">
		  @components.Header("Swap")
      if tx.Status == "success" {
	      @SuccessIcon()
      } else {
        @components.FailureTxIcon()
      }
			<div class="flex flex-col items-center gap-2 text-3xl text-white/50">
	      <div class="flex items-center gap-4">
		      if tx.Kind == "submarine" {
	          <p>@components.ArkBalanceIcon()</p>
		    	} else {
		    		<p>@components.LnBalanceIcon()</p>
		    	}
          <p class="cryptoAmount" sats={tx.Amount}>{tx.Amount} SATS</p>
		    </div>
		    @ArrowDownIcon()
		    <div class="flex items-center gap-4">
	        if tx.Kind == "submarine" {
		    		<p>@components.LnBalanceIcon()</p>
		    	} else {
	          <p>@components.ArkBalanceIcon()</p>
		    	}
          <p class="cryptoAmount" sats={tx.Amount}>{tx.Amount} SATS</p>
		    </div>
	    </div>
      // Add Associating VHTLC Transfers
      <hr class="border border-1 border-white/10 w-full"/>
      if tx.Kind == "submarine" && vhtlc != nil {
        @components.TransferHistoryLine(*vhtlc)  
        if tx.Status == "failure" && redeem != nil {
          <hr class="border border-1 border-white/10 w-full"/>
          <div txid={redeem.Txid} onclick="showTx(this)">@components.TransferHistoryLine(*redeem)</div>
        }
      } else if tx.Kind == "reverse" && redeem != nil {
        <div txid={redeem.Txid} onclick="showTx(this)">@components.TransferHistoryLine(*redeem)</div>
      }
      
		</div>
  </div>
}

templ TxNotFoundContent() {
  @components.DesktopHeader()
	<div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	   <div>
       @components.Header("Transaction not found")
     </div>
  </div>
}