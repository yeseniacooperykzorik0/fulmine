package pages

import (
	"github.com/ArkLabsHQ/fulmine/internal/interface/web/templates/components"
)

templ addressLine(title, value string) {
	<div class="flex justify-between items-center gap-4 w-full">
	  <div>
	    <p class="text-white/50">{title}</p>
			<p class="break-all text-white text-wrap w-68">{value}</p>
		</div>
		@components.CopyButton(value)
	</div>
}

templ ReceiveEditContent() {
	<div id="receiveBody">
	  @components.DesktopHeader()
	  <form hx-post="/receive/preview" hx-target="#receiveBody" hx-swap="outerHTML">
	    <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	      <div>
	        @components.Header("Receive")
	        @components.ReceiveAmount()
	    	</div>
	    	@components.ActionButtons("Confirm", true)
	    </div>
	  </form>
	</div>
	<script>
	  document.querySelector('#amount').addEventListener('input', () => {
			const amount = document.querySelector('#amount').value
			const button = document.querySelector('button[type="submit"]')
			button.disabled = !amount || !amount > 0
		})
	</script>
}

templ ReceiveQrCodeContent(bip21, offchainAddr, boardingAddr, encoded, sats string) {
	<form id="success" hx-post="/receive/success" hx-ext="sse" sse-connect="/events" hx-trigger="sse:TXS_ADDED">
	  @components.DesktopHeader()
	  <input class="hidden" id="submitButton" type="submit"/>
	  <input class="hidden" name="bip21" value={bip21} />
	  <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	    @components.Header("Receive")
      <div class="flex flex-col justify-center items-center gap-2">
	  	  <div class="h-64 mb-8">
            <img src={"data:image/png;base64," + encoded} alt="qrcode for receive address" title={bip21}>
		  </div>
				<div class="flex flex-col gap-2 w-11/12 max-w-[600px]">
					if len(bip21) > 0 {
						@addressLine("BIP 21", bip21)
					}
					if len(boardingAddr) > 0 {
						@addressLine("BTC address", boardingAddr)
					}
					if len(offchainAddr) > 0 {
						@addressLine("Ark address", offchainAddr)
					}
				</div>
	  	</div>
      <div class="flex flex-col md:flex-row justify-start gap-4 mt-10 mb-2">
	      <a class="button md:w-auto" onclick="redirect('/receive/edit')">
	  		  @components.EditIcon()
	  			<span class="ml-2">Edit</span>
	  		</a>
	    </div>
	  </div>
	</form>
}

templ ReceiveSuccessContent(offchainAddr, sats string) {
	@components.DesktopHeader()
	<div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	  <div class="flex flex-col items-center">
		  @components.Header("Receive")
	    @SuccessIcon()
			<p class="mt-8">Received successfully</p>
			<p class="mt-8 text-3xl cryptoAmount" sats={sats}>{sats} SATS</p>
			<div class="flex mt-8 w-64 gap-2">
			  <p class="text-white/50">to</p>
				<p class="overflow-hidden text-ellipsis whitespace-nowrap" id="recvAddress">{offchainAddr}</p>
				@components.CopyWidget(offchainAddr)
			</div>
		</div>
	</div>
}