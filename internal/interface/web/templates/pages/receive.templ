package pages

import (
	"github.com/ArkLabsHQ/ark-node/internal/interface/web/templates/components"
)

templ addressLine(title, value string) {
	<div class="flex justify-between items-center w-80">
	  <div>
	    <p class="text-white/50">{title}</p>
	    <p class="overflow-hidden truncate text-white w-64">{value}</p>
		</div>
		<div class="bg-graybg p-2 rounded-lg" data-value={value} onclick="handleCopy(this, event)">
		  <span data-kind="copy">@components.CopyIcon()</span>
		  <span data-kind="done" class="hidden">@components.CheckMarkIcon()</span>
		</div>
	</div>
}

templ ReceiveEditContent() {
	<div id="receiveBody">
	  @components.DesktopHeader()
	  <form hx-post="/receive/preview" hx-target="#receiveBody" hx-swap="outerHTML">
	    <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	      <div>
	        @components.Header("Receive")
	        @components.ReceiveAmount()
	    	</div>
	    	@components.ActionButtons("Confirm")
	    </div>
	  </form>
	</div>
}

templ ReceiveQrCodeContent(bip21, offchainAddr, boardingAddr, encoded, sats string) {
	<form id="success" hx-post="/receive/success">
	  @components.DesktopHeader()
	  <input class="hidden" id="submitButton" type="submit"/>
	  <input class="hidden" name="bip21" value={bip21} />
	  <input class="hidden" name="sats" />
	  <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	    @components.Header("Receive")
      <div class="flex flex-col justify-center items-center gap-2 overflow-auto">
	  	  <div class="h-64 mb-8">
          <img src={"data:image/png;base64," + encoded} alt="qrcode for receive address" title={bip21}>
	  		</div>
				@addressLine("BIP 21", bip21)
				@addressLine("BTC address", boardingAddr)
				@addressLine("Ark address", offchainAddr)
	  	</div>
      <div class="flex flex-col md:flex-row justify-start gap-4 mt-10 mb-2">
	      <button class="bg-graybg md:w-auto" onclick="handleEdit(event)">
	  		  @components.EditIcon()
	  			<span class="ml-2">Edit</span>
	  		</button>
	    </div>
	  </div>
	</form>
	<script>
		const handleCopy = (element, event) => {
			event.preventDefault()
			if (!navigator.clipboard) return
			navigator.clipboard.writeText(element.dataset.value)
			element.querySelector("[data-kind='copy']").classList.add("hidden")
			element.querySelector("[data-kind='done']").classList.remove("hidden")
			setTimeout(() => {
				element.querySelector("[data-kind='copy']").classList.remove("hidden")
				element.querySelector("[data-kind='done']").classList.add("hidden")
			}, 1000)
		}

		const handleEdit = (event) => {
			event.preventDefault()
			redirect('/receive/edit')
		}
		
		const waitForPayment = async () => {
			const getBalance = async () => {
        const res = await fetch("/helpers/balance")
		    return res.ok ? await res.json() : {}
			}
		  let initialBalance = await getBalance()
			const eventSource = new EventSource('/events');
			eventSource.addEventListener('TXS_ADDED', async (event) => {
				const balance = await getBalance()
				const value = balance.total - initialBalance.total
				if (value > 0) {
					eventSource.close()
			  	document.querySelector("input[name='sats']").value = value
			    document.querySelector("#submitButton").click()
			  } else {
					initialBalance = balance
				}
      })
		}
		waitForPayment()
	</script>
}

templ ReceiveSuccessContent(offchainAddr, sats string) {
	@components.DesktopHeader()
	<div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	  <div class="flex flex-col items-center">
		  @components.Header("Receive")
	    @SuccessIcon()
			<p class="mt-8">Received successfully</p>
			<p class="mt-8 text-3xl cryptoAmount" sats={sats}>{sats} SATS</p>
			<div class="flex mt-8 w-64 gap-2">
			  <p class="text-white/50">to</p>
				<p class="overflow-hidden text-ellipsis whitespace-nowrap">{offchainAddr}</p>
				<p class="text-white/50">@components.CopyIcon()</p>
			</div>
		</div>
	</div>
}