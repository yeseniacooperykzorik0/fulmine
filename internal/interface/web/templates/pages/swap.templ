package pages

import (
	"github.com/ArkLabsHQ/fulmine/internal/interface/web/templates/components"
	"github.com/ArkLabsHQ/fulmine/internal/interface/web/types"
)

templ ArrowDownIcon() {
	<div class="flex items-center w-10 h-10 bg-graybg rounded-full">
	  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mx-auto" viewBox="0 0 24 24">
      <path d="M19.281 14.0306L12.531 20.7806C12.4614 20.8504 12.3787 20.9057 12.2876 20.9434C12.1966 20.9812 12.099 21.0006 12.0004 21.0006C11.9019 21.0006 11.8043 20.9812 11.7132 20.9434C11.6222 20.9057 11.5394 20.8504 11.4698 20.7806L4.71979 14.0306C4.57906 13.8899 4.5 13.699 4.5 13.5C4.5 13.301 4.57906 13.1101 4.71979 12.9694C4.86052 12.8286 5.05139 12.7496 5.25042 12.7496C5.44944 12.7496 5.64031 12.8286 5.78104 12.9694L11.2504 18.4397V3.75C11.2504 3.55109 11.3294 3.36032 11.4701 3.21967C11.6107 3.07902 11.8015 3 12.0004 3C12.1993 3 12.3901 3.07902 12.5307 3.21967C12.6714 3.36032 12.7504 3.55109 12.7504 3.75V18.4397L18.2198 12.9694C18.3605 12.8286 18.5514 12.7496 18.7504 12.7496C18.9494 12.7496 19.1403 12.8286 19.281 12.9694C19.4218 13.1101 19.5008 13.301 19.5008 13.5C19.5008 13.699 19.4218 13.8899 19.281 14.0306Z" fill="currentColor"/>
    </svg>
	</div>
}

templ SwapPreviewIcon() {
	<div class="flex items-center w-16 h-16 bg-white/10 rounded-full mr-2">
	  <svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12 mx-auto" viewBox="0 0 20 20">
      <g fill="none" fill-rule="evenodd" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
        <path d="M13 8h5V3"/>
        <path d="M18 8c-2.837-3.333-5.67-5-8.5-5S4.17 4 2 6m4.5 5.5h-5v5"/>
        <path d="M1.5 11.5c2.837 3.333 5.67 5 8.5 5s5.33-1 7.5-3"/>
      </g>
    </svg>
	</div>
}

templ SwapTab(kind string, icon templ.Component, active bool) {
  <div
	  id={kind}
	  class={"flex", "rounded-lg", templ.KV("bg-white", active), templ.KV("text-black", active)}
		hx-get={"/swap/" + kind}
		hx-target="#swapPartial">
    <p class="px-3 py-2.5 flex items-center gap-2 mx-auto cursor-pointer">
	    @icon
	  	{"Increase " + kind}
	  </p>
	</div>
}

templ SwapTabs(active string) {
  <div class="grid grid-cols-2 gap-2 mt-10 mb-8 text-sm text-white/80 font-semibold">
    @SwapTab("inbound", components.InboundIcon(), active == "inbound")
    @SwapTab("outbound", components.OutboundIcon(), active == "outbound")
  </div>
}

templ SwapPartialContent(active, balance string) {
	<div id="swapPartial">
	  @SwapTabs(active)
	  @SwapInputAmountComponent(active, balance)
	</div>
}

templ SwapBodyContent(currentBalance, nodeBalance string,  isLnConnected bool) {
  @components.DesktopHeader()
	<div id="swapBody">
    <form hx-post="/swap/preview" hx-target="#swapBody" hx-target="outerHTML">
	    <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
				<div>
					@components.HeaderWithAction("Swap", components.SwapHistoryButton())
					if !isLnConnected {
					  <p>LN Node is disconnected</p>
				  } else {
						<div class="flex justify-between items-center">
							<div class="flex items-center gap-4">
								<p>@components.ArkBalanceIcon()</p>
								<div>
									<p class="text-sm text-white/50">Available</p>
									<p class="cryptoAmount" sats={currentBalance}>{currentBalance} SATS</p>
								</div>
							</div>
						</div>
						<div class="flex justify-between items-center mt-6">
							<div class="flex items-center gap-4">
								<p>@components.LnBalanceIcon()</p>
								<div>
									<p class="text-sm text-white/50">Lightning node balance</p>
									<p class="cryptoAmount" sats={nodeBalance}>{nodeBalance} SATS</p>
								</div>
							</div>
						</div>
						@SwapPartialContent("inbound", nodeBalance)
				  }
				</div>
				if isLnConnected {
	    	  @components.ActionButtons("Preview swap", true)
				}
	    </div>
	  </form>
	</div>
	<script>
		const canSwap = () => {
			const amount = document.querySelector('#amount').value
			const button = document.querySelector('button[type="submit"]')
			const balance = parseInt(document.querySelector('#balance').value)
			const sats = parseInt(document.querySelector('#sats').value)
			const kind = document.querySelector('#swapKind').value
			button.disabled = amount.length === 0 || sats > balance
			button.innerText = sats > balance ? 'Not enough funds' : 'Preview swap'

		}
		document.addEventListener('htmx:load', () => {
		  document.querySelector('#amount').addEventListener('input', canSwap)
		})
	</script>
}

templ SwapPreviewContent(kind, sats, feeAmount, total string) {
	<div id="swapBody">
	  <form hx-post="/swap/confirm" hx-target="#swapBody" hx-target="outerHTML">
		  <input type="hidden" name="sats" value={sats}>
		  <input type="hidden" name="kind" value={kind}>
	    <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
			  <div>
				  @components.Header("Confirm Swap")
					<div class="showOnRequest flex flex-col items-center mt-10 w-full">
			      @components.SpinnerIconOrange()
			      <p class="mt-10">Making swap...</p>
			    </div>
					<div class="hideOnRequest flex flex-col items-center">
            @SwapPreviewIcon()
            @SwapMovementComponent(kind, sats)
            @components.SwapTxTable(sats, feeAmount, total)
					</div>
	    	</div>
	    	@components.ActionButtons("Confirm")
	    </div>
	  </form>
	</div>
}

templ SwapSuccessContent(kind, sats, txid, explorerUrl string) {
	<div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">  
	  <div class="flex flex-col items-center">
		  @components.Header("Swap")
	    @SuccessIcon()
			@SwapMovementComponent(kind, sats)
		</div>
		@components.ViewTxButton(txid, explorerUrl)
	</div>
}

templ SwapMovementComponent(kind, sats string) {
  <div class="flex flex-col items-center gap-2 text-3xl text-white/50">
	  <div class="flex items-center gap-4">
		  if kind == "outbound" {
	      <p>@components.ArkBalanceIcon()</p>
			} else {
				<p>@components.LnBalanceIcon()</p>
			}
      <p class="cryptoAmount" sats={sats}>{sats} SATS</p>
		</div>
		@ArrowDownIcon()
		<div class="flex items-center gap-4">
	    if kind == "outbound" {
				<p>@components.LnBalanceIcon()</p>
			} else {
	      <p>@components.ArkBalanceIcon()</p>
			}
      <p class="cryptoAmount" sats={sats}>{sats} SATS</p>
		</div>
	</div>
}



templ SwapHistoryBodyContent() {
	@components.DesktopHeader()
	@components.Header("Swap history")
	<div hx-get="/swaps/0" hx-trigger="load" />
}

templ SwapHistoryListContent(swaps []types.Swap, loadMore bool) {
	if len(swaps) == 0 {
		@components.HistoryEmpty()
	} else {
		for _, swap := range swaps {
			<hr class="border border-1 border-white/10 w-full"/>
			@components.SwapHistoryLine(swap)
		}
		if loadMore {
			<div class="flex justify-center" hx-get={"/swaps/" + swaps[len(swaps)-1].Id} hx-swap="outerHTML">
				<p class="cursor-pointer p-3 text-semibold text-sm text-white/50 hover:text-white/80">Load more</p>
			</div>
		}
	}
}

templ SwapInputAmountComponent(kind, maxBalance string,) {
	<input class="hidden" id="swapKind" name="kind" value={kind} />
	<input class="hidden" id="balance" value={maxBalance} />
	@components.SendAmount(maxBalance)
}
