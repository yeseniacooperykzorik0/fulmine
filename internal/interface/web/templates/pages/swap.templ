package pages

import (
	"github.com/ArkLabsHQ/ark-node/internal/interface/web/templates/components"
)

templ ArrowDownIcon() {
	<div class="flex items-center w-10 h-10 bg-white/10 rounded-full">
	  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mx-auto" viewBox="0 0 24 24">
      <path fill="currentColor" d="m12 20l-.707.707l.707.707l.707-.707zm1-15a1 1 0 1 0-2 0zm-7.707 9.707l6 6l1.414-1.  414l-6-6zm7.414 6l6-6l-1.414-1.414l-6 6zM13 20V5h-2v15z"/>
    </svg>
	</div>
}

templ SwapPreviewIcon() {
	<div class="flex items-center w-16 h-16 bg-white/10 rounded-full mr-2">
	  <svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12 mx-auto" viewBox="0 0 20 20">
      <g fill="none" fill-rule="evenodd" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
        <path d="M13 8h5V3"/>
        <path d="M18 8c-2.837-3.333-5.67-5-8.5-5S4.17 4 2 6m4.5 5.5h-5v5"/>
        <path d="M1.5 11.5c2.837 3.333 5.67 5 8.5 5s5.33-1 7.5-3"/>
      </g>
    </svg>
	</div>
}

templ SwapTab(kind string, icon templ.Component, active bool) {
  <div
	  id={kind}
	  class={"flex", "rounded-lg", templ.KV("bg-white", active), templ.KV("text-black", active)}
		hx-get={"/swap/" + kind}
		hx-target="#swapPartial">
    <p class="px-3 py-2.5 flex items-center gap-2 mx-auto cursor-pointer">
	    @icon
	  	{"Increase " + kind}
	  </p>
	</div>
}

templ SwapTabs(active string) {
  <div class="grid grid-cols-2 gap-2 mt-10 mb-8 text-sm text-white/80 font-semibold">
    @SwapTab("inbound", components.InboundIcon(), active == "inbound")
    @SwapTab("outbound", components.OutboundIcon(), active == "outbound")
  </div>
}

templ SwapPartialContent(active, balance string) {
	<div id="swapPartial">
	  @SwapTabs(active)
	  @SwapInputAmountComponent(active, balance)
    @SwapFeesComponent("")
	</div>
}

templ SwapBodyContent(currentBalance, nodeBalance string) {
  @components.DesktopHeader()
	<div id="swapBody">
    <form hx-post="/swap/preview" hx-target="#swapBody" hx-target="outerHTML">
	    <div class="p-3 flex flex-col justify-between rounded-md h-screen md:h-auto md:bg-desktopbg">
	      @components.Header("Swap")
				<div class="overflow-scroll">
	        <div class="flex justify-between items-center">
	          <div class="flex items-center gap-4">
	            <p>@components.ArkBalanceIcon()</p>
	        		<div>
	        		  <p class="text-sm text-white/50">Available</p>
	        			<p><span class="sats">{currentBalance}</span> SATS</p>
	        		</div>
	        	</div>
            <p
						  class="py-1 px-2 bg-white/20 text-white/50 rounded-lg cursor-pointer"
							onclick="setMax(this)"
							sats={currentBalance}
							kind="outbound">
							MAX
						</p>
	        </div>
	        <div class="flex justify-between items-center mt-6">
	          <div class="flex items-center gap-4">
	            <p>@components.LnBalanceIcon()</p>
	        		<div>
	        		  <p class="text-sm text-white/50">Lightning node balance</p>
	        			<p><span class="sats">{nodeBalance}</span> SATS</p>
	        		</div>
	        	</div>
            <p
						  class="py-1 px-2 bg-white/20 text-white/50 rounded-lg cursor-pointer"
							onclick="setMax(this)"
							sats={nodeBalance}
							kind="inbound">
							MAX
						</p>
	        </div>
					@SwapPartialContent("inbound", nodeBalance)
	    	</div>
	    	@components.ActionButtons("Preview swap")
	    </div>
	  </form>
	</div>
	<script>
	  const setMax = (el) => {
			const kind = el.getAttribute('kind')
			const sats = el.getAttribute('sats')
			if (!kind || !sats) return
			document.querySelector(`#${kind}`).click()
			setTimeout(() => setMaxValue(sats), 1000)
		}
	</script>
}

templ SwapPreviewContent(kind, sats string) {
	<div id="swapBody">
	  <form hx-post="/swap/confirm" hx-target="#swapBody" hx-target="outerHTML">
		  <input type="hidden" name="sats" value={sats}>
		  <input type="hidden" name="kind" value={kind}>
	    <div class="p-3 flex flex-col justify-between rounded-md h-screen md:h-auto md:bg-desktopbg">
	      <div class="flex flex-col items-center">
	        @components.Header("Confirm Swap")
	        @SwapPreviewIcon()
					<p class="mt-8">Swap</p>
					@SwapMovementComponent(kind, sats)
					@SwapFeesComponent(sats)
	    	</div>
	    	@components.ActionButtons("Confirm")
	    </div>
	  </form>
	</div>
}

templ SwapSuccessContent(kind, sats string) {
	<div class="p-3 flex flex-col justify-between rounded-md h-screen md:h-auto md:bg-desktopbg">  
	  <div class="flex flex-col items-center">
		  @components.Header("Swap")
	    @SuccessIcon()
			<p class="mt-8">Swaped successfully</p>
			@SwapMovementComponent(kind, sats)
		</div>
	  <div class="md:flex flex-row-reverse justify-start gap-4 mt-16">
	    <button
			  class="bg-graybg md:w-auto"
				onclick="window.open('https://mempool.space', '_blank')">
				View transaction
			</button>
		</div>
	</div>
}

templ SwapMovementComponent(kind, sats string) {
  <div class="flex flex-col items-center gap-4 my-8 text-3xl text-white/50">
	  <div class="flex items-center gap-4">
		  if kind == "outbound" {
	      <p>@components.ArkBalanceIcon()</p>
			} else {
				<p>@components.LnBalanceIcon()</p>
			}
			<p><span class="sats text-white">{sats}</span> SATS</p>
		</div>
		@ArrowDownIcon()
		<div class="flex items-center gap-4">
	    if kind == "inbound" {
	      <p>@components.ArkBalanceIcon()</p>
			} else {
				<p>@components.LnBalanceIcon()</p>
			}
			<p><span class="sats text-white">{sats}</span> SATS</p>
		</div>
	</div>
}

templ SwapFeesComponent(sats string) {
	<div class="bg-graybg p-4 w-full mt-8 rounded-lg">
    @TxLine("network fee", "500")
    <div class="flex justify-between mb-2">
      <div class="flex items-center gap-2 text-white/50">
        <p>ARK FEE</p>
        <p hx-get="/modal/info" hx-target="#modal">@components.InfoIcon()</p>
      </div>
      <p>0.5%</p>
    </div>
    @TxLine("est. time", "~10 min.")
		if len(sats) > 0 {
      <hr class="text-white/50 mb-2" />
      <div class="flex justify-between mb-2">
        <p class="text-white/50">TOTAL</p>
        <p><span class="sats">{sats}</span> SATS</p>
      </div>
		}
  </div>
}

templ SwapInputAmountComponent(kind, maxBalance string) {
	<input class="hidden" id="swapKind" name="kind" value={kind} />
	@components.SendAmount(maxBalance)
}
