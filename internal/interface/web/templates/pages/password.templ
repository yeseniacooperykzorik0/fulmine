package pages

import (
	"github.com/ArkLabsHQ/ark-node/internal/interface/web/templates/components"
)

templ EyeOpenIcon() {
	<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 1024 1024">
    <path fill="currentColor" d="M515.472 321.408c-106.032 0-192 85.968-192 192c0 106.016 85.968 192 192 192s192-85.968 192-192s-85.968-192-192-192zm0 320c-70.576 0-129.473-58.816-129.473-129.393s57.424-128 128-128c70.592 0 128 57.424 128 128s-55.935 129.393-126.527 129.393zm508.208-136.832c-.368-1.616-.207-3.325-.688-4.91c-.208-.671-.624-1.055-.864-1.647c-.336-.912-.256-1.984-.72-2.864c-93.072-213.104-293.663-335.76-507.423-335.76S95.617 281.827 2.497 494.947c-.4.897-.336 1.824-.657 2.849c-.223.624-.687.975-.895 1.567c-.496 1.616-.304 3.296-.608 4.928c-.591 2.88-1.135 5.68-1.135 8.592c0 2.944.544 5.664 1.135 8.591c.32 1.6.113 3.344.609 4.88c.208.72.672 1.024.895 1.68c.336.88.256 1.968.656 2.848c93.136 213.056 295.744 333.712 509.504 333.712c213.776 0 416.336-120.4 509.44-333.505c.464-.912.369-1.872.72-2.88c.224-.56.655-.976.848-1.6c.496-1.568.336-3.28.687-4.912c.56-2.864 1.088-5.664 1.088-8.624c0-2.816-.528-5.6-1.104-8.497zM512 800.595c-181.296 0-359.743-95.568-447.423-287.681c86.848-191.472 267.68-289.504 449.424-289.504c181.68 0 358.496 98.144 445.376 289.712C872.561 704.53 693.744 800.595 512 800.595z"/>
  </svg>
}

templ EyeCloseIcon() {
  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 16 16">
    <path fill="currentColor" d="m5.318 13.47l.776-.776A6.04 6.04 0 0 0 8 13c1.999 0 3.74-.956 5.225-2.587A12.097 12.097 0 0 0 14.926 8a12.097 12.097 0 0 0-1.701-2.413l-.011-.012l.707-.708c1.359 1.476 2.045 2.976 2.058 3.006c.014.03.021.064.021.098v.06a.24.24 0 0 1-.02.097C15.952 8.188 13.291 14 8 14a7.03 7.03 0 0 1-2.682-.53M2.04 11.092C.707 9.629.034 8.158.02 8.128A.24.24 0 0 1 0 8.03v-.059c0-.034.007-.068.02-.098C.048 7.813 2.709 2 8 2c.962 0 1.837.192 2.625.507l-.78.78A6.039 6.039 0 0 0 8 3c-2 0-3.74.956-5.225 2.587a12.098 12.098 0 0 0-1.701 2.414a12.11 12.11 0 0 0 1.674 2.383zM8.362 4.77L7.255 5.877a2.262 2.262 0 0 0-1.378 1.378L4.77 8.362A3.252 3.252 0 0 1 8.362 4.77m2.86 2.797a3.254 3.254 0 0 1-3.654 3.654l1.06-1.06a2.262 2.262 0 0 0 1.533-1.533zm-9.368 7.287a.5.5 0 0 1-.708-.708l13-13a.5.5 0 0 1 .708.708z"/>
  </svg>
}

templ checkLine(id, text string) {
  <div class="flex items-center gap-2 text-sm text-white/50" id={id}>
    <p>@components.CheckIcon()</p>
    <p>{text}</p>
  </div>
}

templ SetPasswordContent() {
  <form hx-post="/password">
	  <div class="p-3 flex flex-col justify-between h-screen">
	    <div id="setPassComponent">
	      @components.Header("Create password", "/welcome")
	  		<p class="mb-10">Create a password that will be used to unlock your wallet.</p>
        <p class="mb-2">Password</p>
        <div class="flex justify-between items-center gap-4 bg-graybg border-1 border-white/10 p-2 rounded w-full">
          <div class="grow">
            <input 
              autocomplete="new-password"
              class="bg-graybg border-0 w-full"
              name="password"
              oninput="checkPass()"
              type="password">
          </div>
          <p class="eyes" onclick="toggleVisibility()">
            <span>@EyeOpenIcon()</span>
            <span style="display: none">@EyeCloseIcon()</span>
          </p>
        </div>
        <p class="mt-4 mb-2">Repeat password</p>
        <div class="flex justify-between items-center gap-4 bg-graybg border-1 border-white/10 p-2 rounded w-full">
          <div class="grow">
            <input 
              autocomplete="new-password"
              class="bg-graybg border-0 w-full"
              name="pconfirm"
              oninput="checkPass()"
              type="password">
          </div>
          <p class="eyes" onclick="toggleVisibility()">
            <span>@EyeOpenIcon()</span>
            <span style="display: none">@EyeCloseIcon()</span>
          </p>
        </div>
        <div class="border border-2 border-graybg flex flex-col gap-5 p-4 mt-4 rounded-lg w-full">
          <p>Password must contain:</p>
          @checkLine("minchar","Min. 8 characters")
          @checkLine("onenumb","At least one number")
          @checkLine("special","At least one special character")
        </div>
	  	</div>
	  	<div>
        <button class="bg-orange text-white" disabled type="submit">Create wallet</button>
	  	</div>
	  </div>
  </form>
  <script>
    const toggleVisibility = () => {
      document.querySelectorAll(".eyes span").forEach((el) => {
        el.style.display = el.style.display === 'none' ? 'block' : 'none'
      })
      document.querySelectorAll("input").forEach((el) => {
        el.type = el.type === 'text' ? 'password' : 'text'
      })
    }

    const toggleCheck = (id, ok) => {
      document.querySelector(id).classList.remove("text-green");
      document.querySelector(id).classList.remove("text-white/50");
      if (ok) {
        document.querySelector(id).classList.add("text-green");
      } else {
        document.querySelector(id).classList.add("text-white/50");
      }
      return ok
    }

    const checkPass = () => {
      console.log('ch4ck')
      // check they are equals and enable button
      const pass = document.querySelector("input[name='password']").value
      const conf = document.querySelector("input[name='pconfirm']").value
      let enabled = pass && pass.length > 0 && pass === conf
      // check other conditions
      enabled = toggleCheck("#minchar", pass.length > 7) && enabled
      enabled = toggleCheck("#onenumb", /\d/.test(pass)) && enabled
      enabled = toggleCheck("#special", /[^a-zA-Z0-9]/.test(pass)) && enabled
      // enable / disable button
      document.querySelector('button').disabled = !enabled
    }
  </script>
}