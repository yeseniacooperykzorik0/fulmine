package pages

import (
	"github.com/ArkLabsHQ/ark-node/internal/interface/web/templates/components"
	"github.com/ArkLabsHQ/ark-node/internal/core/domain"
)

templ Separator(text string) {
  <p class="uppercase text-sm text-white/50 mb-4 mt-8">{text}</p>
}

templ Status(ok bool, goodLabel, badLabel string) {
  <div class="flex cursor-pointer">
    if ok {
      <p class="flex p-2 rounded-lg bg-green/10 border border-1 border-green/50">
        <span class="text-green mr-2">&#9679;</span>
        {goodLabel}
      </p>
    } else {
      <p class="flex p-2 rounded-lg bg-red/10 border border-1 border-red/50">
        <span class="text-red mr-2">&#9679;</span>
        {badLabel}
      </p>
    }
  </div>
}

templ StatusNode(connected bool) {
  @Status(connected, "Connected", "Disconnected")
}

templ StatusLock(locked bool) {
  <div 
    if locked {
      onclick="redirect('/unlock')"
    } else {
      onclick="redirect('/lock')"
    }
  >
    @Status(!locked, "Unlocked", "Locked")
  </div>
}

templ SettingsTab(text, path string, active bool) {
  <a href={templ.URL(path)}>
    <p class={"px-3", "py-2.5", "rounded-lg", templ.KV("bg-white", active), templ.KV("text-black", active)}>{text}</p>
  </a>
}

templ SettingsTabs(active string) {
  <div class="flex gap-2 mb-8 text-sm text-white/80 font-semibold">
    @SettingsTab("General", "/settings/general", active == "general")
    @SettingsTab("Server", "/settings/server", active == "server")
    @SettingsTab("Lightning", "/settings/lightning", active == "lightning")
  </div>
}

templ SettingsBodyContent(active string, settings domain.Settings, nodeStatus, locked bool) {
  @components.DesktopHeader()
	<div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	  <div>
	    @components.Header("Settings")
      @SettingsTabs(active)
      if active == "general" {
        @SettingsGeneralContent(settings, nodeStatus, locked)
      }
      if active == "server" {
        @SettingsServerContent(settings)
      }
      if active == "lightning" {
        @SettingsLightningContent(settings, nodeStatus)
      }
    </div>
  </div>
}

templ SettingsGeneralContent(settings domain.Settings, nodeStatus, locked bool) {
  <form hx-post="/helpers/settings" hx-trigger="change">
    @Separator("Wallet")
    @StatusLock(locked)
    @Separator("Details")
    @components.Label("Bitcoin unit")
    <select
      class="border border-1 border-white/20 bg-graybg p-4 rounded-lg text-white/50 w-full"
      name="unit"
      value={settings.Unit}
    >
      <option value="sat">Satoshi (0.00000001 BTC)</option>
      <option value="btc">Bitcoin (100.000.000 SATS)</option>
    </select>
    @components.Label("Reference currency")
    <select
      class="border border-1 border-white/20 bg-graybg p-4 rounded-lg text-white/50 w-full"
      name="currency"
      value={settings.Currency}
    >
      <option value="usd">USD ($)</option>
      <option value="eur">EURO (â‚¬)</option>
    </select>
    @components.Label("Server URL")
    @components.InputFake(settings.ServerUrl)
    @Separator("Security")
    <button class="bg-graybg font-semibold rounded-lg mb-4" onclick="handleBackup(event)">
      Backup Private Key
    </button>
  </form>
  <script>
    const handleBackup = (event) => {
      event.preventDefault()
      redirect('/backup')
    }
  </script>
}

templ SettingsServerContent(settings domain.Settings) {
  <form hx-post="/helpers/settings" hx-trigger="change">
    @Separator("Link")
    @components.Label("Server Link")
    <div class="border border-1 border-white/50 flex bg-graybg items-center justify-between rounded-lg gap-4 pr-3 focus:border-orange">
      <input
        class="border-0 bg-graybg p-4 rounded-lg text-white/50 focus:text-white w-full"
        id="serverlink"
        name="serverlink"
        value={settings.ApiRoot}>
      <div class="flex items-center gap-4 text-white/50">
        <p class="cursor-pointer" onclick="pasteFromClipboard('#serverlink')">@components.PasteIcon()</p>
        <p class="cursor-pointer" onclick="notImplemented(event)">@components.ScanIcon()</p>
      </div>
    </div>
    @Separator("Host settings")
    @components.Label("Server Host")
    @components.InputGeneric("serverhost", "", settings.ApiRoot)
    @components.Label("Server Port")
    @components.InputGeneric("serverport", "", settings.ApiRoot)
    @components.Label("Server API Root")
    @components.InputGeneric("serverapihost", "", settings.ApiRoot)
  </form>
}

templ SettingsLightningContent(settings domain.Settings, nodeStatus bool) {
  <form hx-post="/helpers/settings" hx-trigger="change">
    @Separator("Status")
    @StatusNode(nodeStatus)
    @Separator("Connect")
    <p>Enter details manually or scan to connect</p>
    @components.Label("URL")
    if nodeStatus {
      @components.InputFake(settings.LnUrl)
      <button
        class="bg-red/10 text-red font-semibold rounded-lg mt-8"
        hx-post="/helpers/node/disconnect"
      >
        Disconnect
      </button>
    
    } else {
      @components.InputWithPaste("lnurl", "", settings.LnUrl)
      <button class="bg-graybg font-semibold rounded-lg mt-8" hx-post="/helpers/node/connect">Connect</button>
      <button class="bg-graybg font-semibold rounded-lg mt-4 flex items-center justify-center gap-3">
        @components.ScanIcon()
        Scan
      </button>
    }
  </form>
}