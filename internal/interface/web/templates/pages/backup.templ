package pages

import (
	"github.com/ArkLabsHQ/fulmine/internal/interface/web/templates/components"
)

templ BackupTab(kind string, active bool) {
  <div
	  id={kind}
	  class={"flex", "rounded-lg", templ.KV("bg-white", active), templ.KV("text-black", active)}
		hx-get={"/backup/tab/" + kind}
		hx-target="#backupPartial">
    <p class="px-3 py-2.5 flex items-center gap-2 mx-auto cursor-pointer">
	    {kind}
	  </p>
	</div>
}

templ BackupTabs(active string) {
  <div class="grid grid-cols-2 gap-2 my-4 text-sm text-white/80 font-semibold">
    @BackupTab("nsec", active == "nsec")
    @BackupTab("hex", active == "hex")
  </div>
}

templ BackupPartialContent(active, secret string) {
	<div id="backupPartial">
	  @BackupTabs(active)
    <p class="border border-1 border-white/20 p-3 break-words" id="secret">{secret}</p>
	</div>
}

templ BackupInitialBodyContent() {
  @components.DesktopHeader()
  <form hx-get="/backup/secret">
	  <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	    <div>
	      @components.Header("Backup wallet")
        @components.Steps(1, 3)
        <div class="flex flex-col gap-4">
          <p class="text-lg font-semibold">Backup info</p>
          <p>In case of losing or forgeting your password, you will need your Private Key to log back in and continue   using the Fulmine wallet.</p>
          <div class="bg-white/10 rounded-lg flex justify-start items-center gap-4 p-3">
            <p>@components.InfoLargeIcon()</p>
            <p>Backup is highly recomended to prevent loss of funds.</p>
          </div>
        </div>
      </div>
      @components.OrangeButton("Continue")
    </div>
  </form>
}

templ BackupSecretBodyContent(hex, nsec string) {
  <form hx-get="/backup/ack">
	  <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	    <div>
	      @components.Header("Backup wallet")
        @components.Steps(2, 3)
        <div class="flex flex-col gap-4">
          <p class="text-lg font-semibold">Private key</p>
          <p>Write down your Private Key and save it on a safe place that is not accessible online.</p>
          @BackupPartialContent("nsec", nsec)
          <div class="bg-white/10 rounded-lg flex justify-start items-center gap-4 p-3">
            <p>@components.DangerIcon()</p>
            <p>Do not share your Private Key or someone may gain access to your wallet.</p>
          </div>
        </div>
      </div>
      <div class="flex flex-col md:flex-row justify-start gap-4 mt-10 mb-2">
        <button class="bg-orange md:w-auto" type="submit">
	  		  Continue
	  		</button>
        <button class="bg-graybg md:w-32" data-needs="clipboard" onclick="handleCopy(event)">
	  		  @components.CopyIcon()
	  			<span id="copyText" class="ml-2">Copy</span>
	  		</button>
	    </div>
    </div>
  </form>
  <script>
    const handleCopy = (event) => {
			event.preventDefault()
			copyToClipboard('#secret')
			document.querySelector('#copyText').innerText = 'Copied'
			setTimeout(() => document.querySelector('#copyText').innerText = 'Copy', 2100)
		}
  </script>
}

templ BackupAckBodyContent() {
  <div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
    <div>
	    @components.Header("Backup wallet")
      @components.Steps(3, 3)
      <div class="flex flex-col gap-4">
        <p class="text-lg font-semibold">Acknowledgements</p>
        <p>Please take care of the following:</p>
        <div class="flex justify-start items-center gap-4 p-3 text-white/80">
          <input class="bg-white/20 w-5 h-5 unframed" onchange="handleAck()" type="checkbox" />
          <p>I understand that Fulmine doesn't keep a copy of my password and cannot access it in any way.</p>
        </div>
        <div class="flex justify-start items-center gap-4 p-3 text-white/80">
          <input class="bg-white/20 w-5 h-5 unframed" onchange="handleAck()" type="checkbox" />
          <p>I understand that I'll need my secret phrase to access my funds in case of losing the password.</p>
        </div>
      </div>
    </div>
    @components.RedirectButton("Continue", true)
  </div>
  <script>
    const handleAck = () => {
      const button = document.querySelector('button[type="submit"]')
      const boxes = document.querySelectorAll('input[type="checkbox"]')
      if (!button || !boxes || boxes.length === 0) return
      button.disabled = !Array.from(boxes).reduce((prev, curr) => prev && curr.checked, true)
    }
  </script>
}