package templates

import (
  "github.com/ArkLabsHQ/fulmine/internal/core/domain"
)

templ Layout(bodyContent templ.Component, settings domain.Settings) {
  <!DOCTYPE html>
  <html lang="en">
  
    <head>
    	<title>Fulmine</title>
    	<meta charset="UTF-8" />
    	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
    	<meta http-equiv="X-UA-Compatible" content="ie=edge" />
    	<meta name="keywords" content="Ark" />
    	<meta name="description" content="Fulmine frontend" />
    	<meta name="theme-color" content="#FEFEF5" />
    	<link rel="dns-prefetch" href="//fonts.googleapis.com" />
    	<link rel="dns-prefetch" href="//fonts.gstatic.com" />
    	<link rel="preconnect" href="//fonts.googleapis.com" crossorigin />
    	<link rel="preconnect" href="//fonts.gstatic.com" crossorigin />
    	<link rel="preload" href="/static/Switzer-Variable.17d61fe9.woff2" as="font" type="font/woff2" crossorigin />
    	<link rel="preload" href="/static/Switzer-Variable.f14a5147.woff" as="font" type="font/woff" crossorigin />
    	<link rel="preload" href="/static/Switzer-Variable.398e4d30.ttf" as="font" type="font/ttf" crossorigin />
    	<link rel="manifest" href="/static/manifest.webmanifest" />
    	<link rel="apple-touch-icon" href="/static/apple-touch-icon.png" />
    	<link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon" />
    	<link rel="icon" href="/static/favicon.svg" type="image/svg+xml" />
    	<link rel="icon" href="/static/favicon.png" sizes="any" />
    	<link href="/static/styles.css" rel="stylesheet" />
    	<script src="/static/htmx@2.0.4.min.js"></script>
      <script src="/static/htmx-ext-sse@2.2.3-patch.js"></script>
    	<script src="/static/decimal.js"></script>
	    <script src="/static/qr.js"></script>
    </head>

    <body>
    	@templ.JSONScript("settings", settings)
    	<div id="app">
    		<div id="toast"></div>
    		<div id="modal"></div>
    		@bodyContent
    	</div>
    </body>

    <script>
			const toastTimeout = 2100
		
			const copyToClipboard = (element, event) => {
				event.preventDefault()
				if (!navigator.clipboard) return
				const value = element.dataset.value
				if (!value) return
				navigator.clipboard.writeText(value)
				// change the button text to "Copied"
				buttonText = element.querySelector('span.buttonText')
				if (buttonText) {
					const previousText = buttonText.innerText
					buttonText.innerText = 'Copied'
					setTimeout(() => buttonText.innerText = previousText, 2100)
				}
				// update icons if present
				const c = element.querySelector("[data-kind='copy']")
				const d = element.querySelector("[data-kind='done']")
				if (c && d) {
					c.classList.add("hidden")
					d.classList.remove("hidden")
					setTimeout(() => {
						c.classList.remove("hidden")
						d.classList.add("hidden")
					}, 1000)
				}
			}
		
			const disableButton = (button) => {
				button.classList.add("disabled")
			}
			
			const enableButtons = () => {
				document.querySelectorAll('.disabled').forEach((x) => {
					x.classList.remove('disabled')
				})
			}
		
			const fromSatoshis = (sats) => {
				return Decimal.div(sats, 100_000_000).toNumber()
			}
		
			const handleCancel = (event) => {
				event.preventDefault()
				redirect('/')
			}
		
			const hideCopyButtonsIfInsecure = () => {
				if (!navigator.clipboard) {
					document.querySelectorAll('[data-needs="clipboard"]').forEach((el) => {
						el.classList.add('hidden')
					})
				}
			}

			const hideScanButtonsIfNoCameraAvailable = async () => {
				if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
					document.querySelectorAll('[data-needs="camera"]').forEach((el) => {
						el.classList.add('hidden')
					})
				}
			}

			// pass along query parameter with serverUrl
			const passAlongQueryParams = () => {
				const url = new URL(window.location.href)
				const params = new URLSearchParams(url.search);
				const serverUrl = params.get('serverurl')
				if (serverUrl) {
					const hiddenInput = document.querySelector('[name="urlOnQuery"]')
					if (hiddenInput) hiddenInput.value = serverUrl
				}
			}
		
			const pasteFromClipboard = (element, event) => {
				event.preventDefault()
				const id = element.dataset.id
				if (id && navigator.clipboard) {
					navigator.clipboard.readText().then((data) => {
						document.getElementById(id).value = data
					})
				}
			}
		
			const prettyNum = (num, maximumFractionDigits = 2) => {
				if (!num) return '0'
				return new Intl.NumberFormat('en', {
					style: 'decimal',
					maximumFractionDigits,
				}).format(num)
			}
		
			const redirect = (path) => {
				const url = new URL(window.location.href)
				const params = new URLSearchParams(url.search);
				const serverUrl = params.get('serverurl')
				window.location.href = path + (serverUrl ? `/?serverurl=${serverUrl}` : '')
			}

			let scanClose = () => {}

			const scanStart = async (id) => {
				const title = document.getElementById('qr-title')
				const video = document.getElementById('qr-video')
				const closeModal = () => document.getElementById('modalContainer').style.display = 'none'
				// scan qr code
				try {
					const { frontalCamera, QRCanvas, frameLoop, getSize } = qr.dom
					await navigator.mediaDevices.getUserMedia({ video: true })
					title.innerText = 'Scan QR Code'
					const canvas = new QRCanvas()
					const camera = await frontalCamera(video)
					const devices = await camera.listDevices()
					await camera.setDevice(devices[devices.length - 1].deviceId)
					const cancel = frameLoop(() => {
						const res = camera.readFrame(canvas)
						if (res) {
							document.getElementById(id).value = res
							if (camera) camera.stop()
							if (cancel) cancel()
							cancel()
						}
					})
					// func to close modal and stop camera
					scanClose = () => {
						if (camera) camera.stop()
						if (cancel) cancel()
						closeModal()
					}
				} catch {
					title.innerText = 'Camera access denied'
				}
			}
			
			const setMaxValue = (val = 0) => {
				const sats = val || document.querySelector('#amount').getAttribute('max')
				if (isNaN(sats)) return
				const unit = document.querySelector('#unit').innerText
				document.querySelector('#sats').value = sats
				document.querySelector('#amount').value = unit === 'SATS' ? sats : fromSatoshis(sats)
				document.querySelector('#amount').dispatchEvent(new Event('change'))
			}
		
			const showOptions = () => {
				event.stopPropagation()
				const options = document.getElementById('options')
				options.classList.toggle('hidden')
			}
			
			// redirect user to tx page
			const showTx = (el) => {
				const txid = el.getAttribute("txid")
				if (txid) redirect(`/tx/${txid}`)
			}
		
			// change between btc and sat
			const toggleUnit = () => {
				const unit = document.querySelector('#unit')
				if (!unit) return
				const currUnit = unit.innerText
				const nextUnit = currUnit === 'SATS' ? 'BTC' : 'SATS'
				// change unit
				if (unit) unit.innerText = nextUnit
				// change availability
				const available = document.querySelector('#available')
				if (available) {
					const maxSats = document.querySelector('#amount').getAttribute('max')
					const num = !maxSats ? 0 : (nextUnit === 'SATS' ? prettyNum(maxSats) : fromSatoshis(maxSats))
					available.innerText = `Available ${num} ${nextUnit}`
				}
				// change value inside input
				const currVal = document.querySelector('#amount').value
				if (currVal) {
					const nextVal = nextUnit === 'SATS' ? toSatoshis(currVal) : fromSatoshis(currVal)
					document.querySelector('#amount').value = nextVal
				}
				// change steps
				document.querySelector('#amount').step = nextUnit === 'SATS' ? "" : "0.00000001"
			}
		
			// hide/show input password visibility
			const togglePasswordVisibility = () => {
				document.querySelectorAll(".eyes span").forEach((el) => {
					el.style.display = el.style.display === 'none' ? 'block' : 'none'
				})
				document.querySelectorAll(".eyeopener").forEach((el) => {
					el.type = el.type === 'text' ? 'password' : 'text'
				})
			}
		
			// return a bitcoin amount in satoshis
			const toSatoshis = (btc) => {
				return Decimal.mul(btc, 100_000_000).toNumber()
			}
		
			// this function finds every crypto amount in the dom and make it use
			// the preferred unit choosen in settings: sats or btc
			const updateCryptoValues = () => {
				const settings = JSON.parse(document.querySelector('#settings').textContent)
				document.querySelectorAll('.cryptoAmount').forEach((x) => {
					const sats = parseInt(x.getAttribute('sats'))
					if (isNaN(sats)) return
					const suffix = settings.Unit === 'sat' ? 'SATS' : 'BTC'
					const cryptoValue = settings.Unit === 'sat' ? sats : fromSatoshis(sats)
					x.innerHTML = `${prettyNum(cryptoValue, 8)} ${suffix}`
				})
			}
		
			// this function finds every fiat amount in the dom and checks live
			// rate of the preferred currency choosen in setttings: usd or euro
			const updateFiatValues = () => {
				const settings = JSON.parse(document.querySelector('#settings').textContent)
				fetch('https://blockchain.info/ticker').then((res) => {
					res.json().then((json) => {
						document.querySelectorAll('.fiatAmount').forEach((x) => {
							const sats = parseInt(x.getAttribute('sats'))
							if (isNaN(sats)) return
							const prefix = settings.Currency === 'eur' ? 'â‚¬' : '$'
							const fiatValue = (sats * json[settings.Currency.toUpperCase()]?.last) / 100_000_000
							x.innerHTML = `${prefix} ${prettyNum(fiatValue)}`
						})
					})
				})
			}
		
			document.addEventListener('htmx:load', () => {
				enableButtons()
				updateFiatValues()
				updateCryptoValues()
			})

			document.addEventListener('load', () => {
				passAlongQueryParams()
				hideCopyButtonsIfInsecure()
				hideScanButtonsIfNoCameraAvailable()
				// hack, or else select will not have current value selected
				document.querySelectorAll('select').forEach((x) => {
					if (x.getAttribute('value')) x.value = x.getAttribute('value')
				})
			})
		
			// after receiving a toast, delete it after 2 seconds
			document.body.addEventListener("toast", (e) => {
				setTimeout(() => document.querySelector("#toast").innerHTML = "", toastTimeout)
			})
  
  
		</script>
  </html>
}