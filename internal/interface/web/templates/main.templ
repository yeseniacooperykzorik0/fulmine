package templates

import "github.com/ArkLabsHQ/ark-node/internal/interface/web/types"

// in order for tailwind to detect this classes, this javascript code
// needs to be inside a .templ file, which means this script code
// must be here, cannot be on /assets/script.js
script PagesScript() {
	// from 4321 to 0.00004321 with '0' in gray
  const prettyBtc = (btc) => {
    if (!/\d/.test(btc)) return data // not a number
    const prefix = /^[\D]/.test(btc) ? btc[0] : ''
    const number = /^[\D]/.test(btc) ? btc.slice(1) : btc
	  const length = String(number).length
    if (length > 8) return number
    let padding = '0.'
    for (let i = length; i < 8; i++) padding += '0'
	  return `${prefix}<span class="text-gray-400">${padding}</span>${number}`
  }
}

script runOnLoad() {
	updateFiatValues()
	//
	document.querySelectorAll('select').forEach((x) => {
		// hack, or else select will not have current value selected
		if (x.getAttribute('value')) x.value = x.getAttribute('value')
	})

	const settings = JSON.parse(document.querySelector('#settings').textContent)
	if (settings.unit !== "sat") toggleUnit()
}

templ Layout(bodyContent templ.Component, settings types.Settings) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<title>Ark node</title>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta http-equiv="X-UA-Compatible" content="ie=edge"/>
			<meta name="keywords" content="Ark"/>
			<meta name="description" content="Ark node frontend"/>
			<meta name="theme-color" content="#FEFEF5"/>
			<link rel="dns-prefetch" href="//fonts.googleapis.com"/>
			<link rel="dns-prefetch" href="//fonts.gstatic.com"/>
			<link rel="preconnect" href="//fonts.googleapis.com" crossorigin/>
			<link rel="preconnect" href="//fonts.gstatic.com" crossorigin/>
			<link rel="preload" href="/static/Switzer-Variable.17d61fe9.woff2" as="font" type="font/woff2" crossorigin/>
			<link rel="preload" href="/static/Switzer-Variable.f14a5147.woff" as="font" type="font/woff" crossorigin/>
			<link rel="preload" href="/static/Switzer-Variable.398e4d30.ttf" as="font" type="font/ttf" crossorigin/>
			<link rel="manifest" href="/static/manifest.webmanifest"/>
			<link rel="apple-touch-icon" href="/static/apple-touch-icon.png"/>
			<link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon"/>
			<link rel="icon" href="/static/favicon.svg" type="image/svg+xml"/>
			<link rel="icon" href="/static/favicon.png" sizes="any"/>
			<link href="/static/styles.css" rel="stylesheet"/>
		</head>
		<body onload={ runOnLoad() }>
		  @templ.JSONScript("settings", settings)
			<div id="app">
        <div id="toast"></div>
	      <div id="modal"></div>
				@bodyContent
			</div>
			<script src="/static/decimal.js"></script>
			<script src="/static/scripts.js"></script>
		</body>
		<script>
		  const disableButton = (button) => {
				button.classList.add("disabled")
      }

      const prettyNum = (num, maximumFractionDigits = 2) => {
				if (!num) return '0'
        return new Intl.NumberFormat('en', {
          style: 'decimal',
          maximumFractionDigits,
        }).format(num)
      }

      const fromSatoshis = (sats ) => {
        return Decimal.div(sats, 100_000_000).toNumber()
      }

			const toSatoshis = (btc) => {
        return Decimal.mul(btc, 100_000_000).toNumber()
      }

			const redirect = (path) => {
				const url = new URL(window.location.href)
				const params = new URLSearchParams(url.search);
				const aspurl = params.get('aspurl')
				window.location.href = path + (aspurl ? `/?aspurl=${aspurl}` : '')
			}

      const copyToClipboard = (id) => {
		  	if (!navigator.clipboard) return
		  	const addr = document.querySelector(id).innerText
        navigator.clipboard.writeText(addr)
		  }

      const pasteFromClipboard = (id) => {
		  	if (navigator.clipboard) {
          navigator.clipboard.readText().then((addr) => {
		  			document.querySelector(id).value = addr
		  	  })
        }
		  }

      const setMaxValue = (val = 0) => {
		  	const sats = val || document.querySelector('#amount').getAttribute('max')
        if (isNaN(sats)) return
		  	const unit = document.querySelector('#unit').innerText
				document.querySelector('#sats').value = sats
		  	document.querySelector('#amount').value = unit === 'SATS' ? sats : fromSatoshis(sats)
				document.querySelector('#amount').dispatchEvent(new Event('change'))
		  }
  
		  const toggleUnit = () => {
				const unit = document.querySelector('#unit')
				if (!unit) return
		  	const currUnit = unit.innerText
		  	const nextUnit = currUnit === 'SATS' ? 'BTC' : 'SATS'
		  	// change unit
		  	if (unit) unit.innerText = nextUnit
		  	// change availability
				const available = document.querySelector('#available')
				if (available) {
					const maxSats = document.querySelector('#amount').getAttribute('max')
				  const num = !maxSats ? 0 : (nextUnit === 'SATS' ? prettyNum(maxSats) : fromSatoshis(maxSats))
				  available.innerText = `Available ${num} ${nextUnit}`
				}
			  // change value inside input
		  	const currVal = document.querySelector('#amount').value
				if (currVal) {
					const nextVal = nextUnit === 'SATS' ? toSatoshis(currVal) : fromSatoshis(currVal)
		  		document.querySelector('#amount').value = nextVal
		  	}
				// change steps
				document.querySelector('#amount').step = nextUnit === 'SATS' ? "" : "0.00000001"
		  }


      const togglePasswordVisibility = () => {
        document.querySelectorAll(".eyes span").forEach((el) => {
          el.style.display = el.style.display === 'none' ? 'block' : 'none'
        })
        document.querySelectorAll(".eyeopener").forEach((el) => {
          el.type = el.type === 'text' ? 'password' : 'text'
        })
      }

			const updateFiatValues = () => {
				const settings = JSON.parse(document.querySelector('#settings').textContent)
				fetch('https://btcoracle.bordalix.workers.dev/').then((res) => {
          res.json().then((json) => {
            document.querySelectorAll('.fiat').forEach((x) => {
              const sats = parseInt(x.getAttribute('sats'))
	      			if (isNaN(sats)) return
	      			const prefix = settings.currency === 'eur' ? 'â‚¬' : '$'
              const fiatValue = (sats * json.pricefeed[settings.currency]) / 100_000_000
              x.innerHTML = `${prefix} ${prettyNum(fiatValue)}`
            })
          })
        })
			}
  
		  const updateSats = () => {
				const unit = document.querySelector('#unit').innerText
		  	const amount = document.querySelector('#amount').value
		  	const sats = unit === 'SATS' ? amount : toSatoshis(amount)
        document.querySelector('#sats').value = sats
        document.querySelector('#fiat').setAttribute('sats', sats)
		  	updateFiatValues()
		  }

      document.addEventListener('htmx:load', () => {
        document.querySelectorAll('.sats').forEach((x) => {
          if (isNaN(x.textContent)) return
          x.innerHTML = prettyNum(x.textContent)
        })

        document.querySelectorAll('.btc').forEach((x) => {
          if (isNaN(x.textContent)) return
          x.innerHTML = fromSatoshis(x.textContent)
        })

        document.querySelectorAll('.btcm').forEach((x) => {
          const sats = x.textContent
          x.innerHTML = (sats.charAt(0) === '+' ? '+' : '') + fromSatoshis(sats)
        })

				document.querySelectorAll('.disabled').forEach((x) => {
					x.classList.remove('disabled')
        })

        updateFiatValues()

				const url = new URL(window.location.href)
			  const params = new URLSearchParams(url.search);
			  const aspurl = params.get('aspurl')
        if (aspurl) {
					const hiddenInput = document.querySelector("#aspurl")
					if (hiddenInput) hiddenInput.value = aspurl
				}
      })

      document.body.addEventListener("toast", (e) => {
        setTimeout(() => document.querySelector("#toast").innerHTML = "", 2000)
      })
		</script>
	</html>
}
