package components

// button templates

templ connectButton() {
	<button class="button md:w-auto" disabled name="connect" hx-post="/helpers/node/connect">
	  Connect
	</button>
}

templ copyButtonText(payload string) {
	<a data-needs="clipboard" data-value={payload} onclick="copyToClipboard(this, event)">
		<p class="button md:w-auto">
			@CopyIcon()
			<span class="ml-2 buttonText">Copy</span>
		</p>
	</a>
}

templ grayButton(label string) {
	<a class="button md:w-auto" onclick="redirect('/')">
	  {label}
	</a>
}

templ iconButton(icon templ.Component) {
	<div class="bg-white/05 hover:bg-white/10 border border-white/20 hover:border-white/30 cursor-pointer w-10 h-10 rounded-full">
	  <div class="flex items-center justify-center w-full h-full">
	    @icon
		</div>
	</div>
}

templ orangeButton(label string, disabled []bool) {
	<button
	  class="orange md:w-auto"
		if len(disabled) > 0 {
			disabled
		}
		onclick="disableButton(this)"
		type="submit">
	  {label}
	</button>
}

templ redirectButton(label string, disabled []bool) {
	<button
	  class="orange md:w-auto"
	  if len(disabled) > 0 {
		  disabled
	  }
		name="redirect"
	  onclick="handleRedirect(event)">
	  {label}
	</button>
	<script>
	  const handleRedirect = (event) => {
			event.preventDefault()
			redirect('/')
		}
	</script>
}

templ scanButton(id string) {
	<a data-needs="camera" hx-get={"/modal/scanner/" + id} hx-target="#modal">
		<p class="button flex items-center justify-center p-4">
			@ScanIcon()
			<span class="ml-2">Scan</span>
		</p>
	</a>
}

templ settleButtonDot() {
	<button class="flex gap-3 items-center border-0 p-0 text-red" type="submit">
    @WarningIcon()
    Settle now
  </button>
}

templ viewTxButton(txid, explorerUrl string) {
	<a class="button md:w-auto" onclick="handleOpen()">View transaction</a>
	<script>
	  const handleOpen = () => openInExplorer({{txid}}, {{explorerUrl}})
	</script>
}

templ viewTxButtonDot(txid, explorerUrl string) {
	<p class="flex gap-3 items-center" onclick="handleOpen()">
		@ExplorerIcon()
		Open in explorer
	</p>
	<script>
	  const handleOpen = () => openInExplorer({{txid}}, {{explorerUrl}})
	</script>
}

// containers

templ dotsButtonContainer(buttons ...templ.Component) {
	<div class="cursor-pointer dots flex flex-col py-3 px-4 gap-5 relative z-10">
	  for _, button := range buttons {
		  @button
	  }
	</div>
}

templ rowButtonsContainer(buttons ...templ.Component) {
  <div class="flex flex-col md:flex-row gap-4 mt-16">
	  for _, button := range buttons {
		  @button
	  }
	</div>
}

templ rowButtonsCenteredContainer(buttons ...templ.Component) {
  <div class="flex flex-col gap-4 mt-16">
	  for _, button := range buttons {
		  @button
	  }
	</div>
}

// buttons

templ BackButton() {
	@iconButton(BackIcon())
}

templ BackupButton() {
	<div class="flex">
		<a class="button md:w-auto" onclick="redirect('/backup')">
	    Backup your wallet
	  </a>
	</div>
}

templ CopyButton(payload string) {
	<a data-needs="clipboard" data-value={payload} onclick="copyToClipboard(this, event)">
		<p class="button single">
			<span data-kind="copy">@CopyIcon()</span>
			<span data-kind="done" class="hidden">@CheckMarkIcon()</span>
		</p>
	</a>
}

templ CopyWidget(payload string) {
	<a data-needs="clipboard" data-value={payload} onclick="copyToClipboard(this, event)">
		<p class="cursor-pointer text-white/50">
			<span data-kind="copy">@CopyIcon()</span>
			<span data-kind="done" class="hidden">@CheckMarkIcon()</span>
		</p>
	</a>
}

templ DotsButton() {
	@iconButton(DotsIcon())
}

templ PasteWidget(id string) {
	<a data-id={id} data-needs="clipboard" onclick="pasteFromClipboard(this)">
		<p class="cursor-pointer">
			@PasteIcon()
		</p>
	</a>
}

templ ScanWidget(id string) {
	<a data-needs="camera" hx-get={"/modal/scanner/" + id} hx-target="#modal">
    <p class="text-white/50">@CopyIcon()</p>
	</a>
}

templ SettingsButton() {
	@iconButton(SettingsIcon())
}

templ SignOutButton() {
	<div class="flex">
		<a class="button red md:w-auto" onclick="redirect('/lock')">Sign out</a>
	</div>
}

// components (rows or dots)

templ ActionButtons(label string, disabled ...bool) {
	@rowButtonsContainer(
		orangeButton(label, disabled),
		grayButton("Cancel"),
	)
}

templ ContinueButton(centered bool, disabled ...bool) {
	if centered {
		@rowButtonsCenteredContainer(
			orangeButton("Continue", disabled),
		)
	} else {
		@rowButtonsContainer(
			orangeButton("Continue", disabled),
		)
	}
}

templ ContinueCopyButtons(payload string, centered bool) {
	if centered {
		@rowButtonsCenteredContainer(
			orangeButton("Continue", []bool{}),
			copyButtonText(payload),
		)
	} else {
		@rowButtonsContainer(
			orangeButton("Continue", []bool{}),
			copyButtonText(payload),
		)
	}
}

templ CreateWalletButton(disabled ...bool) {
	@rowButtonsCenteredContainer(
		orangeButton("Create wallet", disabled),
	)
}

templ LnConnectButtons(id string) {
	@rowButtonsContainer(
		connectButton(),
		scanButton(id),
	)
}

templ OrangeButton(label string, disabled ...bool) {
	@rowButtonsContainer(orangeButton(label, disabled))
}

templ RedirectButton(label string, disabled ...bool) {
	@rowButtonsContainer(redirectButton(label, disabled))
}

templ SettleButtonsAction(txid, explorerUrl string) {
	@dotsButtonContainer(
		viewTxButtonDot(txid, explorerUrl),
	  settleButtonDot(),
	)
}

templ ViewTxButton(txid, explorerUrl string) {
	@rowButtonsContainer(viewTxButton(txid, explorerUrl))
}

templ ViewTxButtonDot(txid, explorerUrl string) {
	@dotsButtonContainer(viewTxButtonDot(txid, explorerUrl))
}